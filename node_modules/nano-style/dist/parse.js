'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var cache = {};

var hyph = function hyph(s) {
  return s.replace(/[A-Z]|^ms/g, '-$&').toLowerCase();
};
var mx = function mx(rule, media) {
  return media ? media + '{' + rule + '}' : rule;
};
var noAnd = function noAnd(s) {
  return s.replace(/&/g, '');
};
var createDeclaration = function createDeclaration(key, value) {
  return hyph(key) + ':' + value;
};
var createRule = function createRule(_ref) {
  var selector = _ref.selector,
      child = _ref.child,
      media = _ref.media,
      declarations = _ref.declarations;
  return mx(selector + child + '{' + declarations.join(';') + '}', media);
};

var parseRules = function parseRules(obj) {
  var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var media = arguments[2];

  var rules = [];
  var declarations = [];

  for (var key in obj) {
    var value = obj[key];

    if (value === null) continue;

    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      var _media = /^@/.test(key) ? key : null;
      var _child = _media ? child : child + noAnd(key);
      parseRules(value, _child, _media).forEach(function (r) {
        return rules.push(r);
      });
      continue;
    }

    var dec = createDeclaration(key, value);
    declarations.push(dec);
  }

  rules.unshift({
    media: media,
    child: child,
    declarations: declarations
  });

  return rules;
};

var parse = function parse(selector, obj) {
  var rules = parseRules(obj);
  var cssRules = [];

  rules.filter(function (rule) {
    return rule.declarations.length;
  }).forEach(function (rule) {
    var key = JSON.stringify(rule);
    // removes styles on updates
    // if (cache[key]) return

    var ruleset = createRule(Object.assign(rule, { selector: selector }));
    cssRules.push(ruleset);
    cache[key] = true;
  });

  return cssRules.join('');
};

module.exports = parse;