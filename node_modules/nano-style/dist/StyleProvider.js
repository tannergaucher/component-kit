'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Style = require('./Style');

var _Style2 = _interopRequireDefault(_Style);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var base = '';
var cache = {};

var StyleProvider = function (_React$Component) {
  _inherits(StyleProvider, _React$Component);

  function StyleProvider() {
    _classCallCheck(this, StyleProvider);

    return _possibleConstructorReturn(this, (StyleProvider.__proto__ || Object.getPrototypeOf(StyleProvider)).apply(this, arguments));
  }

  _createClass(StyleProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return _defineProperty({}, _constants.CHANNEL, {
        cache: cache
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return [_react2.default.createElement(_Style2.default, { id: 'nano-style-provider', key: 'provider-style', css: base }), this.props.children];
    }
  }]);

  return StyleProvider;
}(_react2.default.Component);

StyleProvider.childContextTypes = _defineProperty({}, _constants.CHANNEL, _propTypes2.default.shape({
  cache: _propTypes2.default.object
}));

StyleProvider.registerCSS = function (id, css) {
  if (cache[id]) return true;
  base += css;
  cache[id] = true;
  return true;
};

exports.default = StyleProvider;