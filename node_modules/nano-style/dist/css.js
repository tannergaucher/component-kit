'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var stylis = require('stylis');
var objss = require('objss');
var hash = require('./hash');
var withTheme = require('./withTheme');
var ThemeProvider = require('./ThemeProvider');

var prefix = 'nano';

var styled = function styled(Component) {
  return function (strings) {
    for (var _len = arguments.length, tokens = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      tokens[_key - 1] = arguments[_key];
    }

    var Styled = function (_React$Component) {
      _inherits(Styled, _React$Component);

      function Styled() {
        _classCallCheck(this, Styled);

        return _possibleConstructorReturn(this, (Styled.__proto__ || Object.getPrototypeOf(Styled)).apply(this, arguments));
      }

      _createClass(Styled, [{
        key: 'render',
        value: function render() {
          var _this2 = this;

          var styles = strings.map(function (str, i) {
            var token = tokens[i] || '';
            var parsed = typeof token === 'function' ? token(_this2.props) : token;
            var css = (typeof parsed === 'undefined' ? 'undefined' : _typeof(parsed)) === 'object' ? objss(parsed) : parsed;
            return str + css;
          }).join('');
          var className = prefix + hash(styles);
          var css = stylis('.' + className, styles);

          var blacklist = [].concat(_toConsumableArray(Object.keys(ThemeStyled.propTypes || {})), ['theme']);
          var next = {};
          for (var key in this.props) {
            if (blacklist.includes(key)) continue;
            next[key] = this.props[key];
          }

          next.className = [this.props.className, className].join(' ').trim();

          return [React.createElement(Style, { key: 'css', css: css }), React.createElement(Component, _extends({ key: 'Component' }, next))];
        }
      }]);

      return Styled;
    }(React.Component);

    Styled.defaultProps = {
      className: ''
    };

    var ThemeStyled = withTheme(Styled);

    return ThemeStyled;
  };
};

var Style = function Style(_ref) {
  var css = _ref.css;
  return React.createElement('style', { dangerouslySetInnerHTML: { __html: css } });
};

module.exports = styled;
module.exports.ThemeProvider = ThemeProvider;