'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ui = require('./ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PropsForm = function (_React$Component) {
  _inherits(PropsForm, _React$Component);

  function PropsForm(props) {
    _classCallCheck(this, PropsForm);

    var _this = _possibleConstructorReturn(this, (PropsForm.__proto__ || Object.getPrototypeOf(PropsForm)).call(this));

    var _React$Children$toArr = _react2.default.Children.toArray(props.children),
        _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
        child = _React$Children$toArr2[0];

    var initialState = child ? child.props : {};
    _this.state = initialState;
    _this.update = function (fn) {
      return _this.setState(fn);
    };
    return _this;
  }

  _createClass(PropsForm, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(next) {
      if (next.children !== this.props.children) {
        var _React$Children$toArr3 = _react2.default.Children.toArray(next.children),
            _React$Children$toArr4 = _slicedToArray(_React$Children$toArr3, 1),
            child = _React$Children$toArr4[0];

        this.update(child.props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var children = _react2.default.Children.toArray(this.props.children);

      var _children = _slicedToArray(children, 1),
          child = _children[0];

      var clone = _react2.default.cloneElement(child, this.state);

      var controls = children.filter(function (c) {
        return c.type.isForm === true;
      }).map(function (c) {
        return _react2.default.cloneElement(c, { props: _this2.state, update: _this2.update });
      });

      return _react2.default.createElement(
        _ui.Flex,
        { flexDirection: 'column' },
        _react2.default.createElement(
          _ui.Box,
          { pb: 4, flex: '1 1 auto' },
          _react2.default.cloneElement(child, this.state)
        ),
        _react2.default.createElement(_ui.Divider, null),
        _react2.default.createElement(
          _ui.Box,
          { flex: 'none', py: 2, mt: 2 },
          controls
        )
      );
    }
  }]);

  return PropsForm;
}(_react2.default.Component);

PropsForm.Input = function (_ref) {
  var update = _ref.update,
      name = _ref.name,
      _ref$props = _ref.props,
      props = _ref$props === undefined ? {} : _ref$props,
      rest = _objectWithoutProperties(_ref, ['update', 'name', 'props']);

  return _react2.default.createElement(
    _ui.Box,
    { mb: 2 },
    _react2.default.createElement(
      _ui.Label,
      null,
      name
    ),
    _react2.default.createElement(_ui.Input, _extends({}, rest, {
      name: name,
      value: props[name] || '',
      onChange: function onChange(e) {
        var value = e.target.value;

        update(_defineProperty({}, name, value));
      }
    }))
  );
};
PropsForm.Input.isForm = true;

PropsForm.Select = function (_ref2) {
  var update = _ref2.update,
      name = _ref2.name,
      _ref2$props = _ref2.props,
      props = _ref2$props === undefined ? {} : _ref2$props,
      rest = _objectWithoutProperties(_ref2, ['update', 'name', 'props']);

  return _react2.default.createElement(
    _ui.Box,
    { mb: 2 },
    _react2.default.createElement(
      _ui.Label,
      null,
      name
    ),
    _react2.default.createElement(_ui.Select, _extends({}, rest, {
      name: name,
      value: props[name] || '',
      onChange: function onChange(e) {
        var value = e.target.value;

        update(_defineProperty({}, name, value));
      }
    }))
  );
};
PropsForm.Select.isForm = true;

exports.default = PropsForm;