'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cartesianProduct = exports.extendDefaultProps = exports.displayObj = exports.toSrcPath = exports.titleize = exports.isIndex = exports.introPage = exports.log = undefined;

var _ramda = require('ramda');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var arr = function arr(v) {
  return Array.isArray(v) ? v : [v];
};
var log = function log(msg) {
  return process.env.VERBOSE && console.log(msg);
};
var toSrcPath = function toSrcPath(docsDir, path) {
  return path.replace(/\md$/, 'js').replace(docsDir, 'src').replace('components/', '');
};

var displayObj = function displayObj(obj) {
  return Object.keys(obj).map(function (k) {
    return k + '=' + obj[k];
  }).join(',');
};

// Adapted from: https://github.com/sindresorhus/titleize/blob/master/index.js
var titleize = function titleize(str) {
  return str.replace(/(?:^|\s|-)\S/g, function (m) {
    return m.toUpperCase();
  }).replace(/(-|_)/g, ' ');
};

var isIndex = function isIndex(path) {
  return (/index\.md/.test(path)
  );
};
var introPage = function introPage(nav) {
  return nav[ROOT_LEVEL_FILE] && nav[ROOT_LEVEL_FILE].find(function (n) {
    return n.name === 'introduction';
  });
};

var extendDefaultProps = function extendDefaultProps(Component, props) {
  Component.defaultProps = Object.assign({}, Component.defaultProps || {}, props);
};

var cartesianProduct = function cartesianProduct(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === undefined ? {} : _ref$theme,
      props = _objectWithoutProperties(_ref, ['theme']);

  var xproduct = (0, _ramda.reduce)((0, _ramda.pipe)(_ramda.xprod, (0, _ramda.map)(_ramda.unnest)), [[]]);

  var parsedProps = Object.keys(props).reduce(function (acc, k) {
    return acc.concat([arr(props[k]).map(function (v) {
      return _defineProperty({}, k, v);
    })]);
  }, []);

  return (0, _ramda.map)(_ramda.mergeAll, xproduct(parsedProps));
};

exports.log = log;
exports.introPage = introPage;
exports.isIndex = isIndex;
exports.titleize = titleize;
exports.toSrcPath = toSrcPath;
exports.displayObj = displayObj;
exports.extendDefaultProps = extendDefaultProps;
exports.cartesianProduct = cartesianProduct;